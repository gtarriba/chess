df$abs_diff <- with(df, white_rating - black_rating)
hist(df$abs_diff, breaks=50)
df$abs_diffc <- with(df,
cut(abs_diff,
breaks = c(-Inf, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, Inf),
right  = FALSE))
table(df$winner)
df$outcome <- as.numeric(ifelse(df$winner=="white", 1,
ifelse(df$winner=="black", 0, NA)))
table(df$outcome)
df %>%
group_by(abs_diffc) %>%
summarize(mean_score = mean(outcome)) %>%
ggplot(aes(x=abs_diffc, y=mean_score)) + geom_col()
table(df$abs_diffc)
df %>%
group_by(abs_diffc) %>%
summarize(mean_score = mean(outcome)) %>%
ggplot(aes(x=abs_diffc, y=mean_score)) + geom_bar()
df %>%
group_by(abs_diffc) %>%
summarize(mean_score = mean(outcome)) %>%
ggplot(aes(x=abs_diffc, y=mean_score)) + geom_bar()
df %>%
group_by(abs_diffc) %>%
summarize(mean_score = mean(outcome))
df %>%
group_by(abs_diffc) %>%
summarize(mean_score = mean(outcome, na.rm=TRUE))
%>%
df %>%
group_by(abs_diffc) %>%
summarize(mean_score = mean(outcome, na.rm=TRUE))
%>%
mean(df$outcome, na.rm=T)
df %>%
group_by(abs_diffc) %>%
summarize(mean_score = mean(outcome, na.rm=TRUE)) %>%
ggplot(aes(x=abs_diffc, y=mean_score)) + geom_col()
df %>%
group_by(abs_diffc) %>%
summarize(mean_score = mean(outcome, na.rm=TRUE)) %>%
ggplot(aes(x=abs_diff, y=mean_score)) + geom_col()
df %>%
group_by(abs_diffc) %>%
summarize(mean_score = mean(outcome, na.rm=TRUE)) %>%
ggplot(aes(x=abs_diffc, y=mean_score)) + geom_col()
table(df$winner)
df$outcome <- as.numeric(ifelse(df$winner=="white", 1,
ifelse(df$winner=="black", 0, 0.5)))
table(df$outcome)
df %>%
group_by(abs_diffc) %>%
summarize(mean_score = mean(outcome, na.rm=TRUE)) %>%
ggplot(aes(x=abs_diffc, y=mean_score)) + geom_col()
# Plot outcome vs players' rating difference
df %>%
group_by(abs_diffc, victory_status) %>%
summarize(n = n()) %>%
mutate(prop = n/sum(n)) %>%
ggplot(aes(fill=victory_status, y=prop, x=abs_diffc)) +
geom_bar(position="fill", stat="identity")
# Plot outcome vs players' rating difference
df %>%
group_by(abs_diffc, victory_status) %>%
summarize(n = n()) %>%
mutate(prop = n/sum(n)) %>%
ggplot(aes(fill=victory_status, y=prop, x=abs_diffc)) +
geom_bar(position="fill", stat="identity")
# Create variable "absolute rating difference"
df$abs_diff <- with(df, sqrt((white_rating - black_rating)^2))
# Create variable "absolute rating difference"
df$abs_diff <- with(df, sqrt((white_rating - black_rating)^2))
# Plot outcome vs players' rating difference
df %>%
group_by(abs_diffc, victory_status) %>%
summarize(n = n()) %>%
mutate(prop = n/sum(n)) %>%
ggplot(aes(fill=victory_status, y=prop, x=abs_diffc)) +
geom_bar(position="fill", stat="identity")
df$diff <- with(df, white_rating - black_rating)
hist(df$diff, breaks=50)
df$diffc <- with(df,
cut(abs_diff,
breaks = c(-Inf, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, Inf),
right  = FALSE))
df %>%
group_by(diffc) %>%
summarize(mean_score = mean(outcome, na.rm=TRUE)) %>%
ggplot(aes(x=abs_diffc, y=mean_score)) + geom_col()
df %>%
group_by(diffc) %>%
summarize(mean_score = mean(outcome, na.rm=TRUE)) %>%
ggplot(aes(x=diffc, y=mean_score)) + geom_col()
df$diff <- with(df, white_rating - black_rating)
hist(df$diff, breaks=50)
df$diffc <- with(df,
cut(abs_diff,
breaks = c(-Inf, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, Inf),
right  = FALSE))
table(df$winner)
df$outcome <- as.numeric(ifelse(df$winner=="white", 1,
ifelse(df$winner=="black", 0, 0.5)))
table(df$outcome)
df %>%
group_by(diffc) %>%
summarize(mean_score = mean(outcome, na.rm=TRUE)) %>%
ggplot(aes(x=diffc, y=mean_score)) + geom_col()
df$diff <- with(df, white_rating - black_rating)
hist(df$diff, breaks=50)
df$diffc <- with(df,
cut(abs_diff,
breaks = c(-Inf, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, Inf),
right  = FALSE))
table(df$winner)
df$outcome <- as.numeric(ifelse(df$winner=="white", 1,
ifelse(df$winner=="black", 0, 0.5)))
table(df$outcome)
df$diff <- with(df, white_rating - black_rating)
hist(df$diff, breaks=50)
df$diffc <- with(df,
cut(abs_diff,
breaks = c(-Inf, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, Inf),
right  = FALSE))
df %>%
group_by(diffc) %>%
summarize(mean_score = mean(outcome, na.rm=TRUE)) %>%
ggplot(aes(x=diffc, y=mean_score)) + geom_col()
table(df$diffc)
df$diff <- with(df, white_rating - black_rating)
hist(df$diff, breaks=50)
df$diffc <- with(df,
cut(abs_diff,
breaks = c(-Inf, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, Inf),
right  = FALSE))
table(df$diffc)
df$diff <- with(df, white_rating - black_rating)
hist(df$diff, breaks=50)
df$diffc <- with(df,
cut(diff,
breaks = c(-Inf, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, Inf),
right  = FALSE))
table(df$winner)
df$outcome <- as.numeric(ifelse(df$winner=="white", 1,
ifelse(df$winner=="black", 0, 0.5)))
table(df$outcome)
df %>%
group_by(diffc) %>%
summarize(mean_score = mean(outcome, na.rm=TRUE)) %>%
ggplot(aes(x=diffc, y=mean_score)) + geom_col()
# Create variable "absolute rating difference"
df$abs_diff <- with(df, sqrt((white_rating - black_rating)^2))
# Plot outcome vs players' rating difference
df %>%
group_by(abs_diffc, victory_status) %>%
summarize(n = n()) %>%
mutate(prop = n/sum(n)) %>%
ggplot(aes(fill=victory_status, y=prop, x=abs_diffc)) +
geom_bar(position="fill", stat="identity")
# Create variable "absolute rating difference"
df$abs_diff <- with(df, sqrt((white_rating - black_rating)^2))
# "Cut" absolute rating difference to make it categorical
df$abs_diffc <- with(df,
cut(diff,
breaks = c(0, 100, 200, 300, 400, 500, Inf),
right  = FALSE))
# Plot outcome vs players' rating difference
df %>%
group_by(abs_diffc, victory_status) %>%
summarize(n = n()) %>%
mutate(prop = n/sum(n)) %>%
ggplot(aes(fill=victory_status, y=prop, x=abs_diffc)) +
geom_bar(position="fill", stat="identity")
# Load the data
full <- read.csv("games.csv")
# Remove null columns
full <- full [ ,colSums(is.na(full))<nrow(full)]
# Remove NA's
full <- full [complete.cases(full), ]
# Keep relevant variables
df <- select(full, rated, turns, victory_status, winner, white_rating, black_rating, opening_eco, moves)
# Check structure of dataset
str(df)
# Keep only first three characters of 'moves'
df$start <- substr(df$moves, 0, 3)
# Create factors
names <- c('rated' ,'victory_status', 'winner', 'opening_eco')
df[,names] <- lapply(df[,names] , factor)
# The 'rated' variable has 4 levels because of different spellings (i.e. False and FALSE), this needs to be fixed
df$rated <- gsub("False", "FALSE", df$rated)
df$rated <- gsub("True", "TRUE", df$rated)
# Descriptive stats of numeric vars
descriptive <- stat.desc(df[ , (c(2, 5:6))])
round(descriptive, 2)
# How many unique openings
nrow(distinct(df, opening_eco))
table(df$start)
floor(df)
floor(nrow(df))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(reticulate)
library(ggplot2)
library(pastecs)
# Load the data
full <- read.csv("games.csv")
# Remove null columns
full <- full [ ,colSums(is.na(full))<nrow(full)]
# Remove NA's
full <- full [complete.cases(full), ]
# Keep relevant variables
df <- select(full, rated, turns, victory_status, winner, white_rating, black_rating, opening_eco, moves)
# Check structure of dataset
str(df)
# Keep only first three characters of 'moves'
df$start <- substr(df$moves, 0, 3)
# Create factors
names <- c('rated' ,'victory_status', 'winner', 'opening_eco')
df[,names] <- lapply(df[,names] , factor)
# The 'rated' variable has 4 levels because of different spellings (i.e. False and FALSE), this needs to be fixed
df$rated <- gsub("False", "FALSE", df$rated)
df$rated <- gsub("True", "TRUE", df$rated)
# Descriptive stats of numeric vars
descriptive <- stat.desc(df[ , (c(2, 5:6))])
round(descriptive, 2)
# How many unique openings
nrow(distinct(df, opening_eco))
# Who wins how often?
perc_win <- table(df$winner)/nrow(df)*100
print(perc_win)
# Percentage point difference in prob. of white win
perc_win[3] - perc_win[1]
# How much likelier is a white win than a black win?
(perc_win[3] - perc_win[1])/perc_win[3]
# In a chart, by rated
df %>%
group_by(rated, winner) %>%
summarize(n = n()) %>%
mutate(prop = n/sum(n)) %>%
ggplot(aes(fill=winner, y=prop, x=rated)) +
geom_bar(position="fill", stat="identity")
# Variable of rating differences
df$diff <- with(df, abs(white_rating - black_rating))
# Summary stats for the two variables of interest
summary(df$diff)
summary(df$turns)
# Histogram of rating differences
hist(df$diff, breaks=50)
# Histogram of game length
hist(df$turns, breaks=50)
# Scatterplot of rating difference and turns
ggplot(df, aes(x=diff, y=turns)) + geom_point(alpha=0.3) #
df$strength <- with(df, white_rating + black_rating)
ggplot(df[df$strength > 4000,], aes(x=diff, y=turns)) + geom_point(alpha=0.2) + geom_smooth(method="lm")
# Create categorical variable of rating difference as diffc
df$diff_cat <- cut(df$diff,
breaks=c(-Inf, 400, 800, Inf),
labels=c("Less than 400","400 to 800","Over 800"))
# Group by diffc and estimate mean turns for each category of diffc, then plot
df %>%
group_by(diff_cat) %>%
summarize(avg_turn = mean(turns)) %>%
ggplot(aes(x=diff_cat, y=avg_turn)) +
geom_col(fill="steelblue") +
geom_text(aes(label=round(avg_turn, digits=1)), position=position_dodge(width=0.9), vjust=-0.25) +
xlab("Absolute rating difference between players") +
ylab("Average number of turns")
df$diff <- with(df, white_rating - black_rating)
hist(df$diff, breaks=50)
df$diffc <- with(df,
cut(diff,
breaks = c(-Inf, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, Inf),
right  = FALSE))
table(df$winner)
df$outcome <- as.numeric(ifelse(df$winner=="white", 1,
ifelse(df$winner=="black", 0, 0.5)))
table(df$outcome)
df %>%
group_by(diffc) %>%
summarize(mean_score = mean(outcome, na.rm=TRUE)) %>%
ggplot(aes(x=diffc, y=mean_score)) + geom_col()
# Create variable "absolute rating difference"
df$abs_diff <- with(df, sqrt((white_rating - black_rating)^2))
# "Cut" absolute rating difference to make it categorical
df$abs_diffc <- with(df,
cut(diff,
breaks = c(0, 100, 200, 300, 400, 500, Inf),
right  = FALSE))
# Plot outcome vs players' rating difference
df %>%
group_by(abs_diffc, victory_status) %>%
summarize(n = n()) %>%
mutate(prop = n/sum(n)) %>%
ggplot(aes(fill=victory_status, y=prop, x=abs_diffc)) +
geom_bar(position="fill", stat="identity")
# We split the dataset into a training dataset and a test dataset
# 75% of the sample size
smp_size <- floor(0.75 * nrow(df))
# set the seed to make the partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- mtcars[train_ind, ]
test <- mtcars[-train_ind, ]
# Estimate random tree model on train dataset
rt_model <- randomForest(outcome ~ ., data = train)
# Estimate random tree model on train dataset
library(randomForest)
install.packages("randomForst")
install.packages("randomForest")
# Estimate random tree model on train dataset
library(randomForest)
rt_model <- randomForest(outcome ~ ., data = train)
table(df$victory_status)
# Get rid of draws and timeouts
df2 <- filter(df, victory_status %in% c("mate", "resign"))
# We split the dataset into a training dataset and a test dataset
smp_size <- floor(0.75 * nrow(df2))
set.seed(123)
train_ind <- sample(seq_len(nrow(df2)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
# Estimate random tree model on train dataset
library(randomForest)
rt_model <- randomForest(victory_status ~ ., data = train)
# Get rid of draws and timeouts
df2 <- filter(df, victory_status %in% c("mate", "resign"))
# Remove NA's
df2 <- df2 [complete.cases(df2), ]
# We split the dataset into a training dataset and a test dataset
smp_size <- floor(0.75 * nrow(df2))
set.seed(123)
train_ind <- sample(seq_len(nrow(df2)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
# Estimate random tree model on train dataset
library(randomForest)
rt_model <- randomForest(victory_status ~ ., data = train)
# Get rid of draws and timeouts
df2 <- filter(df, victory_status %in% c("mate", "resign"))
# Remove NA's
df2 <- df2 [complete.cases(df2), ]
# We split the dataset into a training dataset and a test dataset
smp_size <- floor(0.75 * nrow(df2))
set.seed(123)
train_ind <- sample(seq_len(nrow(df2)), size = smp_size)
train <- df2[train_ind, ]
test <- df2[-train_ind, ]
# Estimate random tree model on train dataset
library(randomForest)
rt_model <- randomForest(victory_status ~ ., data = train)
# Load the data
full <- read.csv("games.csv")
# Remove null columns
full <- full [ ,colSums(is.na(full))<nrow(full)]
# Remove NA's
full <- full [complete.cases(full), ]
# Keep relevant variables
df <- select(full, rated, turns, victory_status, winner, white_rating, black_rating)
# Check structure of dataset
str(df)
# Create factors
names <- c('rated' ,'victory_status', 'winner', 'opening_eco')
df[,names] <- lapply(df[,names] , factor)
# Load the data
full <- read.csv("games.csv")
# Remove null columns
full <- full [ ,colSums(is.na(full))<nrow(full)]
# Remove NA's
full <- full [complete.cases(full), ]
# Keep relevant variables
df <- select(full, rated, turns, victory_status, winner, white_rating, black_rating)
# Check structure of dataset
str(df)
# Create factors
names <- c('rated' ,'victory_status', 'winner')
df[,names] <- lapply(df[,names] , factor)
# The 'rated' variable has 4 levels because of different spellings (i.e. False and FALSE), this needs to be fixed
df$rated <- gsub("False", "FALSE", df$rated)
df$rated <- gsub("True", "TRUE", df$rated)
# Descriptive stats of numeric vars
descriptive <- stat.desc(df[ , (c(2, 5:6))])
round(descriptive, 2)
# How many unique openings
nrow(distinct(df, opening_eco))
# Load the data
full <- read.csv("games.csv")
# Remove null columns
full <- full [ ,colSums(is.na(full))<nrow(full)]
# Remove NA's
full <- full [complete.cases(full), ]
# Keep relevant variables
df <- select(full, rated, turns, victory_status, winner, white_rating, black_rating)
# Check structure of dataset
str(df)
# Create factors
names <- c('rated' ,'victory_status', 'winner')
df[,names] <- lapply(df[,names] , factor)
# The 'rated' variable has 4 levels because of different spellings (i.e. False and FALSE), this needs to be fixed
df$rated <- gsub("False", "FALSE", df$rated)
df$rated <- gsub("True", "TRUE", df$rated)
# Descriptive stats of numeric vars
descriptive <- stat.desc(df[ , (c(2, 5:6))])
round(descriptive, 2)
# Who wins how often?
perc_win <- table(df$winner)/nrow(df)*100
print(perc_win)
# Percentage point difference in prob. of white win
perc_win[3] - perc_win[1]
# How much likelier is a white win than a black win?
(perc_win[3] - perc_win[1])/perc_win[3]
# In a chart, by rated
df %>%
group_by(rated, winner) %>%
summarize(n = n()) %>%
mutate(prop = n/sum(n)) %>%
ggplot(aes(fill=winner, y=prop, x=rated)) +
geom_bar(position="fill", stat="identity")
# Variable of rating differences
df$diff <- with(df, abs(white_rating - black_rating))
# Summary stats for the two variables of interest
summary(df$diff)
summary(df$turns)
# Histogram of rating differences
hist(df$diff, breaks=50)
# Histogram of game length
hist(df$turns, breaks=50)
# Scatterplot of rating difference and turns
ggplot(df, aes(x=diff, y=turns)) + geom_point(alpha=0.3) #
df$strength <- with(df, white_rating + black_rating)
ggplot(df[df$strength > 4000,], aes(x=diff, y=turns)) + geom_point(alpha=0.2) + geom_smooth(method="lm")
# Create categorical variable of rating difference as diffc
df$diff_cat <- cut(df$diff,
breaks=c(-Inf, 400, 800, Inf),
labels=c("Less than 400","400 to 800","Over 800"))
# Group by diffc and estimate mean turns for each category of diffc, then plot
df %>%
group_by(diff_cat) %>%
summarize(avg_turn = mean(turns)) %>%
ggplot(aes(x=diff_cat, y=avg_turn)) +
geom_col(fill="steelblue") +
geom_text(aes(label=round(avg_turn, digits=1)), position=position_dodge(width=0.9), vjust=-0.25) +
xlab("Absolute rating difference between players") +
ylab("Average number of turns")
# Get rid of draws and timeouts
df2 <- filter(df, victory_status %in% c("mate", "resign"))
# Remove NA's
df2 <- df2 [complete.cases(df2), ]
# We split the dataset into a training dataset and a test dataset
smp_size <- floor(0.75 * nrow(df2))
set.seed(123)
train_ind <- sample(seq_len(nrow(df2)), size = smp_size)
train <- df2[train_ind, ]
test <- df2[-train_ind, ]
# Estimate random tree model on train dataset
library(randomForest)
rt_model <- randomForest(victory_status ~ ., data = train)
table(train$victory_status)
df2$victory_status <- droplevels.factor(df2$victory_status)
table(train$victory_status)
df2$victory_status <- droplevels(df2$victory_status)
table(train$victory_status)
# Get rid of draws and timeouts
df2 <- filter(df, victory_status %in% c("mate", "resign"))
df2$victory_status <- droplevels(df2$victory_status)
# Remove NA's
df2 <- df2 [complete.cases(df2), ]
# We split the dataset into a training dataset and a test dataset
smp_size <- floor(0.75 * nrow(df2))
set.seed(123)
train_ind <- sample(seq_len(nrow(df2)), size = smp_size)
train <- df2[train_ind, ]
test <- df2[-train_ind, ]
# Estimate random tree model on train dataset
library(randomForest)
rt_model <- randomForest(victory_status ~ ., data = train)
table(train$victory_status)
test$pred <- predict(rt_model, test, type = "class")
mean(test$pred == test$victory_status)
# Get rid of draws and timeouts
df2 <- filter(df, victory_status %in% c("mate", "resign"))
df2$victory_status <- droplevels(df2$victory_status)
# Remove NA's
df2 <- df2 [complete.cases(df2), ]
# We split the dataset into a training dataset and a test dataset
smp_size <- floor(0.75 * nrow(df2))
set.seed(123)
train_ind <- sample(seq_len(nrow(df2)), size = smp_size)
train_data <- df2[train_ind, ]
test_data <- df2[-train_ind, ]
# Estimate random tree model on train dataset
library(randomForest)
rt_model <- randomForest(victory_status ~ ., data = train_data)
# Now see if it can predict the outcomes in the test dataset
test_data$pred <- predict(rt_model, test_data, type = "class")
mean(test_data$pred == test_data$victory_status)
# Get rid of draws and timeouts
df2 <- filter(df, victory_status %in% c("mate", "resign"))
df2$victory_status <- droplevels(df2$victory_status)
# Remove NA's
df2 <- df2 [complete.cases(df2), ]
# We split the dataset into a training dataset and a test dataset
smp_size <- floor(0.75 * nrow(df2))
set.seed(123)
train_ind <- sample(seq_len(nrow(df2)), size = smp_size)
train_data <- df2[train_ind, ]
test_data <- df2[-train_ind, ]
# Estimate random tree model on train dataset
library(randomForest)
rt_model <- randomForest(victory_status ~ ., data = train_data)
# Now see if it can predict the outcomes in the test dataset
test_data$pred <- predict(rt_model, test_data, type = "class")
mean(test_data$pred == test_data$victory_status)
